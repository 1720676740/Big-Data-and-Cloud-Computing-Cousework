import json
import os
import sys
from multiprocessing import Process

from cffi.backend_ctypes import xrange

import utils


class MapReduce(object):

    def __init__(self, input_dir=utils.default_input_dir, output_dir=utils.default_output_dir,
                 n_mappers=utils.default_n_mappers, n_reducers=utils.default_n_reducers,
                 clean=True):
         # Constructor to initialize the MapReduce object
        # It accepts optional parameters such as input directory, output directory, number of mappers,
        # number of reducers, and whether to clean temporary files


        if not sys.platform.startswith('linux'):
            raise Exception("This script can only run on a Linux system.")

        self.input_dir = input_dir
        self.output_dir = output_dir
        self.n_mappers = n_mappers
        self.n_reducers = n_reducers
        self.clean = clean
        self.file_handler = FileHandler(utils.get_input_file(self.input_dir), self.output_dir)
        # Default is to split the file using a line count-based calculation
        self.file_handler.split_file_line(self.n_mappers)

    def mapper(self, key, value):
        # Abstract method for implementing the mapper logic
        # Needs to be implemented by the subclass
        pass

    def reducer(self, key, values_list):
        # Abstract method for implementing the reducer logic
        # Needs to be implemented by the subclass
        pass

    def check_position(self, key, position):
        # Checks if the given key belongs to the reducer within the computed range
        # The key is hashed using Python's built-in hash function and then modulo operation is performed
        # on the hash value to get an integer between 0 and n_reducers-1, representing the reducer number
        # It compares the calculated reducer number with the given position and returns True if they are equal,
        # indicating that the key-value pair should be processed, otherwise returns False indicating that the
        # key-value pair does not belong to the specified reducer computation
        return position == (hash(key) % self.n_reducers)

    def run_mapper(self, index):
        # Runs an instance of the implemented mapper method
        # Reads the corresponding input split file based on the given index
        # Calls the mapper method to process the key-value pairs
        # Saves the intermediate results to a temporary mapping file
        input_split_file = open(utils.get_input_split_file(index), "r")
        key = input_split_file.readline()
        value = input_split_file.read()
        input_split_file.close()
        if (self.clean):
            os.unlink(utils.get_input_split_file(index))
        mapper_result = self.mapper(key, value)
        # Group the intermediate results generated by Map task by key and save the intermediate results of each
        # group in json format for subsequent Reduce functions to process
        for reducer_index in range(self.n_reducers):
            temp_map_file = open(utils.get_temp_map_file(index, reducer_index), "w+")
            json.dump([(key, value) for (key, value) in mapper_result
                       if self.check_position(key, reducer_index)]
                      , temp_map_file)
            temp_map_file.close()

    def run_reducer(self, index):
        # Runs an instance of the implemented reducer method
        # Aggregates all values associated with the given key from the temporary mapping files of all mappers
        # Calls the reducer method to process the key-value pairs
        # Saves the results to the output file
        key_values_map = {}
        for mapper_index in range(self.n_mappers):
            temp_map_file = open(utils.get_temp_map_file(mapper_index, index), "r")
            mapper_results = json.load(temp_map_file)
            for (key, value) in mapper_results:
                if not (key in key_values_map):
                    key_values_map[key] = []
                try:
                    key_values_map[key].append(value)
                except Exception as e:
                    print("Exception while inserting key: " + str(e))
            temp_map_file.close()
            if self.clean:
                os.unlink(utils.get_temp_map_file(mapper_index, index))
        key_value_list = []
        for key in key_values_map:
            key_value_list.append(self.reducer(key, key_values_map[key]))
        output_file = open(utils.get_output_file(index), "w+")
        json.dump(key_value_list, output_file)
        output_file.close()

    def run(self, join=True):
         # Executes the map and reduce operations
        # First runs the mapping step, then runs the reducing step
        # Can choose whether to merge the output results into a single file
        # initialize mappers list
        map_workers = []
        rdc_workers = []
        for thread_id in range(self.n_mappers):
            p = Process(target=self.run_mapper, args=(thread_id,))
            p.start()
            map_workers.append(p)
        [t.join() for t in map_workers]
        for thread_id in range(self.n_reducers):
            p = Process(target=self.run_reducer, args=(thread_id,))
            p.start()
            rdc_workers.append(p)
        [t.join() for t in rdc_workers]
        if join:
            self.join_outputs()

    def join_outputs(self, clean=True, sort=True, decreasing=True):
        # Merges the output files of all reducers into a single output file
        # Can choose whether to delete the output files of the reducers
        # Can choose to sort the results
        try:
            return self.file_handler.join_files(self.n_reducers, clean, sort, decreasing)
        except Exception as e:
            print("Exception occured while joining: maybe the join has been performed already  -- " + str(e))
            return []


class FileHandler(object):
     # Constructor to initialize the FileHandler object
     # It accepts the input file path and the output directory path as parameters

    def __init__(self, input_file_path, output_dir):
        self.input_file_path = input_file_path
        self.output_dir = output_dir

    def initiate_file_split(self, split_index, index):
        # Initializes the split file and adds index information
        file_split = open(utils.get_input_split_file(split_index - 1), "w+")
        file_split.write(str(index) + "\n")
        return file_split

    def is_on_split_position_char(self, character, index, split_size, current_split):
        # Checks whether a split should be performed based on the number of characters

        return index > split_size * current_split + 1 and character.isspace()

    def is_on_split_position_line(self, index, split_size, current_split):
        # Checks whether a split should be performed based on the number of lines
        return index > split_size * current_split + 1

    def split_file_char(self, number_of_splits):
        # Splits the input file into multiple files based on the number of characters
        file_size = os.path.getsize(self.input_file_path)
        unit_size = file_size / number_of_splits + 1
        original_file = open(self.input_file_path, "r")
        file_content = original_file.read()
        original_file.close()
        (index, current_split_index) = (1, 1)
        current_split_unit = self.initiate_file_split(current_split_index, index)
        for character in file_content:
            current_split_unit.write(character)
            if self.is_on_split_position_char(character, index, unit_size, current_split_index):
                current_split_unit.close()
                current_split_index += 1
                current_split_unit = self.initiate_file_split(current_split_index, index)
            index += 1
        current_split_unit.close()

    def split_file_line(self, number_of_splits):
        # Splits the input file into multiple files based on the number of lines
        with open(self.input_file_path, "r") as input_file:
            # Count the number of lines in the input file
            line_count = sum(1 for line in input_file)
        unit_size = line_count // number_of_splits + 1
        (index, current_split_index) = (1, 1)
        current_split_unit = self.initiate_file_split(current_split_index, index)
        with open(self.input_file_path, "r") as input_file:
            for line in input_file:
                current_split_unit.write(line)
                if self.is_on_split_position_line(index, unit_size, current_split_index):
                    current_split_unit.close()
                    current_split_index += 1
                    current_split_unit = self.initiate_file_split(current_split_index, index)
                index += 1
            current_split_unit.close()

    def join_files(self, number_of_files, clean=False, sort=True, decreasing=True):
        # Joins all files in the output directory into a single output file
        output_join_list = []
        for reducer_index in xrange(0, number_of_files):
            f = open(utils.get_output_file(reducer_index), "r")
            output_join_list += json.load(f)
            f.close()
            if clean:
                os.unlink(utils.get_output_file(reducer_index))
        if sort:
            from operator import itemgetter as operator_ig
            # sort using the key
            output_join_list.sort(key=operator_ig(1), reverse=decreasing)
        output_join_file = open(utils.get_output_join_file(self.output_dir), "w+")
        # json.dump(output_join_list, output_join_file)
        for item in output_join_list:
            output_join_file.write('{},{}\n'.format(item[0], item[1]))
        output_join_file.close()
        return output_join_list
